sigma_eta = .1550,
G_0 = 0
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.if.Breto.SVL <- system.time({
if.Breto.SVL <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "Breto.SVL.list",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(Breto.SVL.filt,start=params_test,Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
)
L.if.Breto.SVL <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL[[i]]),Np=Breto.SVL.list[[1]][run_level]  ))
),
se=TRUE)
)
H.if.Breto.SVL<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
plot(if.Breto.SVL)
r.if.Breto.SVL <- data.frame(logLik=L.if.Breto.SVL[,1],logLik_se=L.if.Breto.SVL[,2],t(sapply(if.Breto.SVL,coef)))
summary(r.if.Breto.SVL$logLik,digits=5)
r.if.Breto.SVL[which.max(r.if.Breto.SVL$logLik),]
pairs(~logLik+mu_h+phi+sigma_eta,data=r.if.Breto.SVL)
params_nowe<- c(
mu_h        = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'mu_h']),
phi         = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'phi']),
sigma_nu    = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'sigma_nu']),
sigma_eta   = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'sigma_eta']),
G_0         = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'G_0'])
)
pf1 <- pfilter(Breto.SVL.filt,params=params_nowe,
Np=Breto.SVL.list[[1]][run_level],filter.traj=T)
par(mfrow=c(3,1))
plot(zwroty,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
sigma=as.xts(exp(pf1@filter.traj[1,1,2:(dim(pf1@filter.traj)[3])]/2),order.by=index(zwroty))
plot(sigma,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
rho=as.xts(tanh(pf1@filter.traj[2,1,2:(dim(pf1@filter.traj)[3])]),order.by=index(zwroty))
plot(rho, minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
par(mfrow=c(1,1))
r.if.Breto.SVL <- data.frame(logLik=L.if.Breto.SVL[,1],logLik_se=L.if.Breto.SVL[,2],t(sapply(if.Breto.SVL,coef)))
summary(r.if.Breto.SVL$logLik,digits=5)
r.if.Breto.SVL[which.max(r.if.Breto.SVL$logLik),]
pairs(~logLik+mu_h+phi+sigma_eta,data=r.if.Breto.SVL)
params_nowe<- c(
mu_h        = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'mu_h']),
phi         = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'phi']),
sigma_nu    = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'sigma_nu']),
sigma_eta   = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'sigma_eta']),
G_0         = as.numeric(coef(if.Breto.SVL[which.max(r.if.Breto.SVL$logLik)])[1,'G_0'])
)
pf1 <- pfilter(Breto.SVL.filt,params=params_nowe,
Np=Breto.SVL.list[[1]][run_level],filter.traj=T)
mu_h
r.if.Breto.SVL[which.max(r.if.Breto.SVL$logLik),]
pairs(~logLik+mu_h+phi+sigma_eta,data=r.if.Breto.SVL)
r.if.Breto.SVL[which.max(r.if.Breto.SVL$logLik),]
par(mfrow=c(3,1))
plot(zwroty,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
sigma=as.xts(exp(pf1@filter.traj[1,1,2:(dim(pf1@filter.traj)[3])]/2),order.by=index(zwroty))
plot(sigma,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
rho=as.xts(tanh(pf1@filter.traj[2,1,2:(dim(pf1@filter.traj)[3])]),order.by=index(zwroty))
plot(rho, minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
par(mfrow=c(1,1))
#rm(list = ls())
setwd("C:/Users/user/Dropbox/phd/Skrypty do R/Leverage-effect/Dane")
#ladowanie zwrotow z pliku
dane<-read.csv.zoo('C:/Users/user/Dropbox/phd/Skrypty do R/Leverage-effect/Dane/wig_zwroty.csv', header = T,
sep=',')
dane=as.xts(dane)
############################################
#poczatek okresu badania
data.poczatkowa='1996-01'
#koniec okresu badania
data.koncowa='2016-12'
############################################
zwroty=dane[paste(data.poczatkowa,"/",data.koncowa,sep="")]
Breto.SVL_statenames <- c("H","G","Y_state")
Breto.SVL_rp_names <- c("sigma_nu","mu_h","phi","sigma_eta")
Breto.SVL_ivp_names <- c("G_0")
Breto.SVL_paramnames <- c(Breto.SVL_rp_names,Breto.SVL_ivp_names)
Breto.SVL_covarnames <- "covaryt"
rproc1 <- "
double beta,omega,nu;
omega = rnorm(0,sigma_eta * sqrt( 1- phi*phi ) * sqrt(1-tanh(G)*tanh(G)));
nu = rnorm(0, sigma_nu);
G += nu;
beta = Y_state * sigma_eta * sqrt( 1- phi*phi );
H = mu_h*(1 - phi) + phi*H + beta * tanh( G ) * exp(-H/2) + omega;
"
rproc2.sim <- "
Y_state = rnorm( 0,exp(H/2) );
"
rproc2.filt <- "
Y_state = covaryt;
"
Breto.SVL_rproc.sim <- paste(rproc1,rproc2.sim)
Breto.SVL_rproc.filt <- paste(rproc1,rproc2.filt)
Breto.SVL_initializer <- "
G = G_0;
H =rnorm(mu_h,sigma_eta/sqrt((1-phi*phi)));
Y_state = rnorm( 0,exp(H/2) );
"
Breto.SVL_rmeasure <- "
y=Y_state;
"
Breto.SVL_dmeasure <- "
lik=dnorm(y,0,exp(H/2),give_log);
"
Breto.SVL_toEstimationScale <- "
Tsigma_eta = log(sigma_eta);
Tsigma_nu = log(sigma_nu);
Tphi = logit(phi);
"
Breto.SVL_fromEstimationScale <- "
Tsigma_eta = exp(sigma_eta);
Tsigma_nu = exp(sigma_nu);
Tphi = expit(phi);
"
Breto.SVL.filt <- pomp(data=data.frame(y=as.vector(zwroty),
time=1:length(zwroty)),
statenames=Breto.SVL_statenames,
paramnames=Breto.SVL_paramnames,
covarnames=Breto.SVL_covarnames,
times="time",
t0=0,
covar=data.frame(covaryt=c(0,as.vector(zwroty)),
time=0:length(zwroty)),
tcovar="time",
rmeasure=Csnippet(Breto.SVL_rmeasure),
dmeasure=Csnippet(Breto.SVL_dmeasure),
rprocess=discrete.time.sim(step.fun=Csnippet(Breto.SVL_rproc.filt),delta.t=1),
initializer=Csnippet(Breto.SVL_initializer),
toEstimationScale=Csnippet(Breto.SVL_toEstimationScale),
fromEstimationScale=Csnippet(Breto.SVL_fromEstimationScale)
)
run_level <- 1
Breto.SVL_Np <-          c(100,1e3,1e3)
Breto.SVL_Nmif <-        c(10, 100,200)
Breto.SVL_Nreps_eval <-  c(4,  10,  20)
Breto.SVL_Nreps_local <- c(10, 20, 20)
Breto.SVL_Nreps_global <-c(10, 20, 20)
Breto.SVL.list<-list(Breto.SVL_Np ,Breto.SVL_Nmif,Breto.SVL_Nreps_eval,
Breto.SVL_Nreps_local,Breto.SVL_Nreps_global )
Breto.SVL_rw.sd_rp <- 0.02
Breto.SVL_rw.sd_ivp <- 0.1
Breto.SVL_cooling.fraction.50 <- 0.5
##testowa wersja parametr?w
params_test <- c(
mu_h = -0.21,
phi = .98,
sigma_nu = exp(-4.5),
sigma_eta = .1550,
G_0 = 0
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.if.Breto.SVL <- system.time({
if.Breto.SVL <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,
.packages='pomp', .combine=c,.export = "Breto.SVL.list",
.options.multicore=list(set.seed=TRUE)) %dopar% try(
pomp::mif2(Breto.SVL.filt,start=params_test,Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
)
L.if.Breto.SVL <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=rbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL[[i]]),Np=Breto.SVL.list[[1]][run_level]  ))
),
se=TRUE)
)
H.if.Breto.SVL<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
plot(if.Breto.SVL)
Breto.SVL_box <- rbind(
sigma_eta=c(0.001,1),
sigma_nu=c(0.001,.1),
phi    = c(0.9,1),
mu_h = c(-1,1),
G_0=c(-1,1)
)
Breto.SVL_box <- rbind(
sigma_eta=c(0.001,1),
sigma_nu=c(0.001,.1),
phi    = c(0.9,1),
mu_h = c(-1,1),
G_0=c(-1,1)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
plot(if.Breto.SVL.box )
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
plot(if.Breto.SVL.box )
pf1 <- pfilter(Breto.SVL.filt,params=params_test,
Np=1000,filter.traj=T)
par(mfrow=c(3,1))
plot(zwroty,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
sigma=as.xts(exp(pf1@filter.traj[1,1,2:(dim(pf1@filter.traj)[3])]/2),order.by=index(zwroty))
plot(sigma,minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
rho=as.xts(tanh(pf1@filter.traj[2,1,2:(dim(pf1@filter.traj)[3])]),order.by=index(zwroty))
plot(rho, minor.ticks=NULL,grid.ticks.on = "years",major.ticks="years")
par(mfrow=c(1,1))
Breto.SVL_box <- rbind(
sigma_eta=c(0.1,1),
sigma_nu=c(0.1,.1),
phi    = c(0.9,1),
mu_h = c(-1,1),
G_0=c(-0.9,0.9)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
Breto.SVL_box <- rbind(
sigma_eta=c(0.1,1),
sigma_nu=c(0.1,.1),
phi    = c(0.9,0.98),
mu_h = c(-1,1),
G_0=c(-0.9,0.9)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
run_level <- 2
##--------Likelihood maximization using randomized starting values--------
Breto.SVL_box <- rbind(
sigma_eta=c(0.1,1),
sigma_nu=c(0.1,.1),
phi    = c(0.9,0.95),
mu_h = c(-1,1),
G_0=c(-0.9,0.9)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
run_level <- 3
Breto.SVL_Np <-          c(100,1e3,1e3)
Breto.SVL_Nmif <-        c(10, 100,200)
Breto.SVL_Nreps_eval <-  c(4,  10, 20)
Breto.SVL_Nreps_local <- c(10, 20, 20)
Breto.SVL_Nreps_global <-c(10, 20, 20)
Breto.SVL.list<-list(Breto.SVL_Np ,Breto.SVL_Nmif,Breto.SVL_Nreps_eval,
Breto.SVL_Nreps_local,Breto.SVL_Nreps_global )
Breto.SVL_rw.sd_rp <- 0.02
Breto.SVL_rw.sd_ivp <- 0.1
Breto.SVL_cooling.fraction.50 <- 0.5
##--------Likelihood maximization using randomized starting values--------
Breto.SVL_box <- rbind(
sigma_eta=c(0.1,1),
sigma_nu=c(0.1,.1),
phi    = c(0.9,0.95),
mu_h = c(-1,1),
G_0=c(-0.9,0.9)
)
detectCores()
cl <- makeCluster(3, type = "SOCK")
registerDoSNOW(cl)
t.Breto.SVL.box <- system.time({
if.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level],.packages='pomp', .export = "Breto.SVL.list",.combine=c,
.options.multicore=list(set.seed=TRUE)) %dopar%
pomp::mif2(
Breto.SVL.filt,start=apply(Breto.SVL_box,1,function(x) runif(1,x[1],x[2])),Np=Breto.SVL.list[[1]][run_level] , Nmif=Breto.SVL.list[[2]][run_level] ,cooling.type="geometric",
cooling.fraction.50=Breto.SVL_cooling.fraction.50,
transform=TRUE,
rw.sd = rw.sd(
mu_h      = Breto.SVL_rw.sd_rp,
phi       = Breto.SVL_rw.sd_rp,
sigma_eta = Breto.SVL_rw.sd_rp,
sigma_nu = Breto.SVL_rw.sd_rp,
G_0       = ivp(Breto.SVL_rw.sd_ivp)
)
)
L.Breto.SVL.box <- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",.combine=rbind,
.options.multicore=list(set.seed=TRUE)) %dopar% {
set.seed(87932+i)
logmeanexp(
replicate(Breto.SVL.list[[3]][run_level] ,
logLik(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level] ))
),
se=TRUE)
}
H.Breto.SVL.box<- foreach(i=1:Breto.SVL.list[[5]][run_level] ,.packages='pomp', .export = "Breto.SVL.list",
.combine=cbind,.options.multicore=list(set.seed=TRUE)) %dopar% try(
exp(pfilter(Breto.SVL.filt,params=coef(if.Breto.SVL.box[[i]]),Np=Breto.SVL.list[[1]][run_level],pred.mean=TRUE)@pred.mean[1,])
)
})
stopCluster(cl)
beep(2)
plot(if.Breto.SVL.box )
